<?php

namespace Modules\Workflow\Repositories\Eloquent;

use App\Exceptions\CustomErrorException;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;
use Modules\Core\Repositories\Eloquent\EloquentBaseRepository;
use Modules\Workflow\Repositories\WorkflowRepository;
use Modules\Workflow\Services\Workflow;

class EloquentWorkflowRepository extends EloquentBaseRepository implements WorkflowRepository
{

    /**
     * Creates new Workflow
     * @param $assignedBy
     * @param $requestTypeId
     * @param $refRequestId
     * @param $userNote
     * @param $requestText
     * @param $requestData
     * @param $assignedTo
     * @param null $statusId
     * @return mixed
     * @throws \Exception
     */
    public function createRequest($assignedBy, $requestTypeId, $refRequestId, $userNote, $requestText, $requestData, $assignedTo, $statusId = null)
    {
        try {

            $requestType = app(getRepoName('RequestType', 'Workflow'))->find($requestTypeId);

            //Create new workflow request
            $workflowRequest = array(
                'request_type_id' => $requestType->id,
                'request_ref_id' => $refRequestId,
                'request_status_id' => ($statusId == null) ? $requestType->initial_request_status_id : $statusId,
                'assigned_to_user_id' => ($assignedTo == null) ? $requestType->default_assignee_user_id : $assignedTo->id,
                'requester_id' => $assignedBy->id,
                'request_workflow_status_id' => ($statusId == null) ? $requestType->initial_request_status_id : $statusId,
                'request_date' => Carbon::now(),
                'is_expired' => false,
                'created_by' => $assignedBy->id,
                'user_note' => $userNote,
                'request_text' => $requestText,
                'is_open' => true,
                'datetime_added' => Carbon::now(),
                'request_data' => json_encode($requestData),
            );

            //Create workflow request object
            $objWorkflow = $this->create($workflowRequest);

            return $objWorkflow;
        } catch (\Exception $ex) {
            throw $ex;
        }

    }

    /**
     * Get requests created by user in given duration
     * @param $user
     * @param $fromDate
     * @param $toDate
     * @param $requetTypeId
     * @param bool $considerRejected
     * @return mixed
     * @throws \Exception
     */
    public function getLatestRequestByUser($user, $fromDate, $toDate, $requetTypeId, $considerRejected = true)
    {

        try {

            $query = $this->model->where('requester_id', '=', $user->id)
                ->where('request_type_id', '=', $requetTypeId)
                ->whereBetween('request_date', [$fromDate->format('Y-m-d'), $toDate->format('Y-m-d')]);

            if ($considerRejected == false) {
                $query = $query->where('request_status_id', '<>', Config('asgard.workflow.config.request_status.rejected'));
            }

            return $query->orderBy('request_date', 'desc')->first();

        } catch (\Exception $ex) {
            throw $ex;
        }

    }

    /**
     * Returns if request is approved
     * @param $workflowId
     * @return bool
     * @throws \Exception
     */
    public function isApproved($workflowId)
    {

        try {

            $objWorkflow = $this->find($workflowId);
            return ($objWorkflow->request_workflow_status_id == STATUS_APPROVED);

        } catch (\Exception $ex) {
            throw $ex;
        }


    }

    /**
     * Returns if workflow is rejected
     * @param $workflowId
     * @return bool
     * @throws \Exception
     */
    public function isRejected($workflowId)
    {
        try {
            $objWorkflow = $this->find($workflowId);
            return ($objWorkflow->request_workflow_status_id == STATUS_REJECTED);
        } catch (\Exception $ex) {
            throw $ex;
        }
    }

    /**
     * Get requests generated by user
     * @param $userId
     * @param array $with
     * @param int $noOfRequests
     * @return \Illuminate\Database\Eloquent\Collection|\Illuminate\Support\Collection|static[]
     * @throws \Exception
     */
    public function getUserRequests($userId, $with = [], $noOfRequests = 10)
    {

        try {
            return $this->model->with($with)
                ->where('requester_id', '=', $userId)
                ->with($with)
                ->orderBy('datetime_added', 'desc')
                ->take($noOfRequests)
                ->get();

        } catch (\Exception $ex) {
            throw $ex;
        }


    }


    /**
     * Delete given workflow ids
     * @param $workflowIds
     * @return mixed
     * @throws \Exception
     */
    public function deleteSelected($workflowIds)
    {
        try {
            return $this->model->whereIn('id', $workflowIds)->delete();

        } catch (\Exception $ex) {
            throw $ex;
        }

    }


    /**
     * Returns data associated with request
     * @param $objWorkflow
     * @return mixed
     * @throws \Exception
     */
    public function getRequestData($objWorkflow)
    {
        try {
            return app(getRepoNameByArray($objWorkflow->requestType->repository))
                ->findByAttributes(['id' => $objWorkflow->request_ref_id]);
        } catch (\Exception $ex) {
            throw $ex;
        }
    }


    /**
     * Returns workflows assigned to user
     * @param $userId
     * @param array $with
     * @return \Illuminate\Database\Eloquent\Collection|\Illuminate\Support\Collection|static[]
     * @throws \Exception
     */
    public function getAssignedRequests($userId, $with = [], $requestTypeIds, $noOfRecords = 10)
    {

        //Get all the requests assigned to user also check the requests in workflowlog as if forwarded to other user the current user will no be in workflow table)
        try {

            $query = $this->model->with($with)
                ->where('is_open', '=', true)
                ->where(function ($query) use ($userId) {
                    $query->whereIn('id', function ($query) use ($userId) {
                        $query->select(DB::raw('request_workflow_id'))
                            ->from('workflow__workflowlogs')->where('from_emp_id', '=', $userId);
                    })->orWhere('assigned_to_user_id', '=', $userId);
                })
                ->orderBy('datetime_added', 'desc');
            if (count($requestTypeIds) > 0) {
                $query = $query->whereIn('request_type_id', $requestTypeIds);
            }

            return $query->take($noOfRecords)->get();

        } catch (\Exception $ex) {
            throw  $ex;
        }
    }

    /**
     * Updates the workflow and send notification
     * @param $workflow
     * @param $requestStatus
     * @param $isClosed
     * @param $notifyToUserId
     * @param null $requestTypeId
     * @param null $notificationHeader
     * @param null $notificationMessage
     * @param null $notificationGroupId
     * @param null $loggedInUserId
     * @return bool
     * @throws \Exception
     */
    public function updateWorkflow($workflow, $requestStatus, $isClosed, $notifyToUserId, $requestTypeId = null, $notificationHeader = null, $notificationMessage = null, $notificationGroupId = null, $loggedInUserId = null)
    {

        try {
            $workflowLog = [
                'request_workflow_id' => $workflow->id,
                'from_request_status_id' => $workflow->request_workflow_status_id,
                'to_request_status_id' => $requestStatus,
                'from_emp_id' => $workflow->assigned_to_user_id,
                'request_workflow_status_id' => $requestStatus,
                'to_emp_id' => $workflow->requester_id,
                'log_date' => Carbon::now(),
                'action' => 'Request cancelled',
                'supervisor_comment' => 'Workflow updated',
                'is_closed' => true,
            ];

            //Create new log
            app('Modules\Workflow\Repositories\WorkflowLogRepository')->create($workflowLog);
            $notificationRepo = app('Modules\Workflow\Repositories\NotificationRepository');

            //update workflow
            $workflow->request_workflow_status_id = $requestStatus;
            $workflow->request_status_id = $requestStatus;
            $workflow->is_open = !$isClosed;
            $workflow->save();

            return true;

        } catch (\Exception $ex) {
            throw  $ex;
        }
    }

    /**
     * Approve Workflow
     * @param $workflow
     * @return bool
     * @throws \Exception
     */
    public function approve($workflow)
    {
        try {
            $requestStatus = STATUS_APPROVED;

            if ($workflow->request_workflow_status_id != STATUS_APPROVED) {
                $requestType = app(getRepoName('RequestType', 'Workflow'))
                    ->find($workflow->request_type_id);

                //In case of calcelation request, the called approve function in the respective repository will check the request type
                //and call approve or cencel accordingly

                $approveRequest = app(getRepoNameByArray($requestType->repository))
                    ->approve($workflow->request_ref_id, $workflow);

                $workflowLog = [
                    'request_workflow_id' => $workflow->id,
                    'from_request_status_id' => $workflow->request_workflow_status_id,
                    'to_request_status_id' => $requestStatus,
                    'from_emp_id' => $workflow->assigned_to_user_id,
                    'to_emp_id' => $workflow->requester_id,
                    'log_date' => Carbon::now(),
                    'action' => 'Request Approved',
                    'supervisor_comment' => ($workflow->supervisor_note != null) ? $workflow->supervisor_note : '',
                    'is_closed' => true,
                ];

                //Create new log
                app(getRepoName('WorkflowLog', 'Workflow'))->create($workflowLog);

                //update workflow as approved
                $workflow->request_workflow_status_id = $requestStatus;
                $workflow->request_status_id = $requestStatus;
                $workflow->is_open = false;
                $workflow->save();

                return true;
            } else {
                throw new CustomErrorException("Requet is already approved");
            }

        } catch (\Exception $ex) {
            throw $ex;
        }
    }

    /**
     * Rejects the given request
     * @param $workflow
     * @return bool
     * @throws \Exception
     */
    public function reject($workflow)
    {
        try {

            if($workflow->request_workflow_status_id != STATUS_REJECTED) {

                $requestType = app(getRepoName('RequestType', 'Workflow'))
                    ->find($workflow->request_type_id);

                //Update leave status
                $updateLeaveStatus = app(getRepoNameByArray($requestType->repository))
                    ->reject($workflow->request_ref_id, $workflow->request_type_id);

                $workflowLog = [
                    'request_workflow_id' => $workflow->id,
                    'from_request_status_id' => $workflow->request_workflow_status_id,
                    'to_request_status_id' => STATUS_REJECTED,
                    'from_emp_id' => $workflow->assigned_to_user_id,
                    'to_emp_id' => $workflow->requester_id,
                    'request_workflow_status_id' => STATUS_REJECTED,
                    'log_date' => Carbon::now(),
                    'action' => 'Request Rejected',
                    'supervisor_comment' => $workflow->supervisor_note,
                    'is_closed' => true,
                ];

                //Create new log
                app(getRepoName('WorkflowLog', 'Workflow'))->create($workflowLog);

                //update workflow as rejected
                $workflow->request_workflow_status_id = STATUS_REJECTED;
                $workflow->request_status_id = STATUS_REJECTED;
                $workflow->is_open = false;
                $workflow->save();
                return true;
            }
            else{
                throw new CustomErrorException("Request is already rejected");
            }

        } catch (\Exception $ex) {
            throw $ex;
        }
    }

    /**
     * Cancels the given workflow
     * @param $workflow
     * @return bool
     * @throws \Exception
     */
    public function cancel($workflow)
    {

        try {

            if($workflow->request_workflow_status_id != STATUS_CANCELLED) {

                $requestType = app(getRepoName('RequestType', 'Workflow'))
                    ->find($workflow->request_type_id);

                //Update leave status
                $updateRequestStatus = app($requestType->repository)
                    ->cancel($workflow->request_ref_id, $workflow->request_type_id);

                $workflowLog = [
                    'request_workflow_id' => $workflow->id,
                    'from_request_status_id' => $workflow->request_workflow_status_id,
                    'to_request_status_id' => STATUS_CANCELLED,
                    'from_emp_id' => $workflow->assigned_to_user_id,
                    'request_workflow_status_id' => STATUS_CANCELLED,
                    'to_emp_id' => $workflow->requester_id,
                    'log_date' => Carbon::now(),
                    'action' => 'Request cancelled',
                    'supervisor_comment' => $workflow->supervisor_note,
                    'is_closed' => true,
                ];

                //Create new log
                app(getRepoName('WorkflowLog', 'Workflow'))->create($workflowLog);

                //update workflow as cancelled
                $workflow->request_workflow_status_id = STATUS_CANCELLED;
                $workflow->request_status_id = STATUS_CANCELLED;
                $workflow->is_open = false;
                $workflow->save();

                return true;
            }else{
                throw  new CustomErrorException("Status is already cancelled");
            }
        } catch (\Exception $ex) {
            throw  $ex;
        }
    }

    /**
     * Forwards the workflow
     * @param $workflow
     * @param $toUser
     * @param null $fromUser
     * @return bool
     * @throws \Exception
     */
    public function forward($workflow, $toUser, $fromUser = null)
    {
        try {

            $forwardedFromUserId = isset($fromUser->id) ? $fromUser->id : $workflow->assigned_to_user_id;

            $workflowLog = [
                'request_workflow_id' => $workflow->id,
                'from_request_status_id' => $workflow->request_workflow_status_id,
                'to_request_status_id' => STATUS_FORWARDED,
                'from_emp_id' => $forwardedFromUserId,
                'to_emp_id' => $toUser->id,
                'log_date' => Carbon::now(),
                'action' => 'Request Forwarded',
                'supervisor_comment' => ($workflow->supervisor_note != null) ? $workflow->supervisor_note : '',
                'is_closed' => false,
            ];

            //Create new log
            $Log = app(getRepoName('WorkflowLog', 'Workflow'))->create($workflowLog);

            //update workflow as approved
            $workflow->request_workflow_status_id = STATUS_FORWARDED;
            $workflow->request_status_id = STATUS_FORWARDED;
            $workflow->assigned_to_user_id = $toUser->id;
            $workflow->requester_id = $forwardedFromUserId;
            $workflow->save();

            return true;
        } catch (\Exception $ex) {
            throw  $ex;
        }
    }
}
