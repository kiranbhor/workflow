<?php

namespace Modules\Workflow\Http\Controllers\Api;

use App\Exceptions\ActionNotAllowedException;
use App\Exceptions\CustomErrorException;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Modules\User\Contracts\Authentication;
use Modules\Workflow\Repositories\WorkflowRepository;
use DataTables;
use Workflow;

class WorkflowController extends Controller
{
    /**
     * @var WorkflowRepository
     */
    private $workflow;

    /**
     * @var Authentication
     */
    private $auth;

    /**
     * WorkflowController constructor.
     * @param WorkflowRepository $workflow
     * @param Authentication $auth
     */
    public function __construct(WorkflowRepository $workflow, Authentication $auth)
    {

        $this->workflow = $workflow;
        $this->auth = $auth;
    }

    /**
     * Get requets generated by user
     * @param Request $request
     * @return mixed
     */
    public function getRequests(Request $request)
    {
        $workflows = $this->workflow->getUserRequests($this->auth->user()->id, ['requestType', 'status', 'assignedUser']);
        return Datatables::of($workflows)->make(true);
    }

    /**
     * Remove the specified resource from storage.
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy(Request $request)
    {
        try {
            $workflow = $this->workflow->find($request->workflow_id);
            $this->workflow->destroy($workflow);
            return response()->json(['success' => true, 'message' => 'Request deleted Successfully.']);
        } catch (\Exception $ex) {
            Log::error($ex->getMessage());
            Log::error($ex->getTraceAsString());
            return response()->json(['success' => false, 'message' => trans('core::errors.messages.something went wrong', ['operation' => 'deleting request'])], 500);
        }
    }

    /**
     * Remove selected workflows
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroySelected(Request $request)
    {
        try {
            $this->workflow->deleteSelected($request->workflow_id_selected);
            return response()->json(['success' => true, 'message' => 'Selected Workflow deleted Successfully.']);
        } catch (\Exception $ex) {
            return response()->json(['success' => false, 'message' => trans('core::errors.messages.something went wrong', ['operation' => 'deleting request'])], 500);
        }

    }

    /**
     * Returns modal to delete workflow
     * @param $id
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function getDeleteWorkflow($id)
    {
        try {
            $workflow = $this->workflow->findWithRelation($id, ['requestType', 'requesterUser']);
            return view('workflow::common.delete-workflow', compact('workflow'));
        } catch (\Exception $ex) {
            response()->view('core::partials.error', ['message' => trans('core::errors.messages.something went wrong', ['operation' => 'getting request information'])], 500);
        }
    }


    /**
     * Deletes workflow from db
     * @param Request $request
     * @return mixed
     */
    public function postDeleteWorkflow(Request $request)
    {
        try {
            $workflow = $this->workflow->find($request->workflow_id);
            $this->workflow->destroy($workflow);
            return response()->json(['success' => true, 'message' => 'Request deleted Successfully.']);
        } catch (\Exception $ex) {
            return response()->json(['success' => false, 'message' => trans('core::errors.messages.something went wrong', ['operation' => 'deleting request'])], 500);
        }
    }



    /**
     * Approved the workflow
     * @param Request $request
     * @return mixed
     */
    public function postApproveRequest(Request $request)
    {
        try {
            $userNote = $request->user_note;
            $userId = $this->auth->user()->id;

            DB::beginTransaction();

            foreach ($request->workflow_id_selected as $approvalRequestId) {
                $workflow = $this->workflow->find($approvalRequestId);

                if ($workflow != null) {
                    if ($workflow->assigned_to_user_id != $userId) {
                        throw ActionNotAllowedException("You are not allowd to approve the request");
                    }

                    $workflow->supervisor_note = $userNote;

                    if ($this->workflow->approve($workflow) != true) {
                        throw new \Exception('Something went wrong please try again later');
                    }
                }
            }

            ##TODO Notify Approval

            DB::commit();
            return response()->json(['success' => true, 'message' => 'Request Approved Successfully.']);
        } catch (ActionNotAllowedException $ex) {
            DB::rollback();
            return response()->json(['success' => false, 'message' => trans('core::errors.messages.action-not-allowed', ['operation' => 'approve this request']), 'workflows' => $workflow]);
        }
        catch(CustomErrorException $ex){
            DB::rollback();
            return response()->json(['success' => false, 'message' => $ex->getMessage(), 'workflows' => $workflow]);

        } catch (\Exception $ex) {
            throw $ex;
            DB::rollback();
            Log::error($ex->getMessage(),['trace'=>$ex->getTraceAsString(),'request'=>$request,'user'=>$this->auth->user()]);
            return response()->json(['success' => false, 'message' => trans('core::errors.messages.something went wrong', ['operation' => 'approving request'])], 500);
        }

    }

    /**
     * Reject the workflow
     * @param Request $request
     * @return mixed
     */
    public function postRejectRequest(Request $request)
    {

        $ids = array();

        try {
            $userNote = $request->user_note;
            $userId = $this->auth->user()->id;

            DB::beginTransaction();

            foreach ($request->workflow_id_selected as $approvalRequestId) {
                $workflow = $this->workflow->find($approvalRequestId);

                if ($workflow != null) {
                    if ($workflow->assigned_to_user_id != $userId) {
                        throw ActionNotAllowedException("You are not allowed to approve the request");
                    }

                    $workflow->supervisor_note = $userNote;

                    if ($this->workflow->reject($workflow) != true) {
                        throw \Exception('Something went wrong please try again later');
                    }
                }
                array_push($ids, $approvalRequestId);
            }

            ##TODO Notify

            DB::commit();
            return response()->json(['success' => true, 'message' => 'Request Rejected Successfully.', 'workflows' => $workflow]);
        } catch (ActionNotAllowedException $ex) {

            DB::rollback();
            return response()->json(['success' => false, 'message' => trans('core::errors.messages.action-not-allowed', ['operation' => 'reject this request'])]);
        }
        catch(CustomErrorException $ex){
            DB::rollback();
            return response()->json(['success' => false, 'message' => $ex->getMessage(), 'workflows' => $workflow]);

        }catch (\Execption $ex) {
            DB::rollback();
            return response()->json(['success' => false, 'message' => trans('core::errors.messages.something went wrong', ['operation' => 'rejecting request'])]);
        }

    }

    /**
     * Forward the request to specified user
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws \Exception
     */
    public function postForwardRequest(Request $request)
    {
        try {

            $fromUser = app(getRepoName('User','User'))->find($this->auth->user()->id);

            $userNote = $request->user_note;
            $toUser  = app(getRepoName('Employee', 'Profile'))->getSupervisor($fromUser->id);


            $userId = $this->auth->user()->id;

            DB::beginTransaction();

            foreach ($request->workflow_id_selected as $workflowId) {

                $workflow = $this->workflow->find($workflowId);
                if ($workflow != null) {
                    if ($workflow->assigned_to_user_id != $toUser->id) {
                        throw new ActionNotAllowedException("You are not authorised to forward the request");
                    }

                    $workflow->supervisor_note = $userNote;

                    if ($this->workflow->forward($workflow, $toUser,$fromUser) != true) {
                        throw  new \Exception("Something went wrong");
                    }
                }
            }

            DB::commit();

            ##TODO Notify Forward


            return response()->json(['success' => true, 'message' => 'Request Forwarded to '.$toUser->fname]);

        } catch (ActionNotAllowedException $ex) {
            DB::rollback();
            return response()->json(['success' => false, 'message' => trans('core::errors.messages.action-not-allowed', ['operation' => 'forward this request']), 'workflows' => $workflow]);
        } catch (\Execption $ex) {
            DB::rollback();
            return response()->json(['success' => false, 'message' => trans('core::errors.messages.something went wrong', ['operation' => 'reject this request']), 'workflows' => $workflow]);
        }


    }


}
